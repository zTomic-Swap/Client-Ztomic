{
    "noir_version": "1.0.0-beta.13+1d260dfdc3ef35c9f26a755be118fe48d04d7dbf",
    "hash": "16921335712746816689",
    "abi": {
        "parameters": [
            {
                "name": "bob_priv_key",
                "type": {
                    "kind": "field"
                },
                "visibility": "private"
            },
            {
                "name": "alice_pub_key_x",
                "type": {
                    "kind": "field"
                },
                "visibility": "private"
            },
            {
                "name": "alice_pub_key_y",
                "type": {
                    "kind": "field"
                },
                "visibility": "private"
            },
            {
                "name": "hash_lock_nonce",
                "type": {
                    "kind": "field"
                },
                "visibility": "private"
            },
            {
                "name": "order_id",
                "type": {
                    "kind": "field"
                },
                "visibility": "private"
            },
            {
                "name": "merkle_proof",
                "type": {
                    "kind": "array",
                    "length": 20,
                    "type": {
                        "kind": "field"
                    }
                },
                "visibility": "private"
            },
            {
                "name": "is_even",
                "type": {
                    "kind": "array",
                    "length": 20,
                    "type": {
                        "kind": "boolean"
                    }
                },
                "visibility": "private"
            },
            {
                "name": "nullifier_hash",
                "type": {
                    "kind": "field"
                },
                "visibility": "public"
            },
            {
                "name": "root",
                "type": {
                    "kind": "field"
                },
                "visibility": "public"
            }
        ],
        "return_type": null,
        "error_types": {
            "4703047920556725948": {
                "error_kind": "string",
                "string": "Field failed to decompose into specified 254 limbs"
            }
        }
    },
    "bytecode": "H4sIAAAAAAAA/8y9DbiN5do1vC7//5JUKiFJkqzfSpIkSRKSJEmSJCFJkiRJkiRJkoQkIUmSJEmSJEmSJKGS/iRJkso7z71XPdJkzjH2HOd7+4675/ju41rvHHOMcY5rrDN775D23z/5cv9vl3adui6sl5b2YJ3//v+H2JM39/+Wzf2/+747Ks67o+O8OybOu3Jx3h0b5135OO8qxHlXMc674+K8qxTn3fFx3lWO8+6EOO+qxHl3Ypx3VeO8OynOu2px3p2c+3//0ilv2r//hNz/WyEtqT8BOBv3T4Xkjv35P/xsnr++U9jn/6EasSc99mTEnszYkxV7smNPTuw5NfacFntOjz01Y88ZsadW7Dkz9tSOPWfFHrP22bGnbuw5J/bE7J52buypH3vOiz0NYs/5sadh7Lkg9jSKPRfGnsax56LY0yT2NI09zWLPxbGneey5JPa0iD2Xxp6Wseey2NMq9lwee1rHnitiT5vYc2XsaRt7roo97WLP1bGnfey5JvZ0iD3Xxp6Osee62NMp9lwfezrHnhtiT5fY0zX2dIs9N8ae7rHnptjTI/bcHHt6xp5bYk+v2HNr7Okde26LPX1iz+2xp2/suSP29Is9d8ae/rHnrtgzIPbcHXsGxp57Ys+g2HNv7Bkce+6LPUNiz/2xZ2jseSD2DIs9D8ae4bHnodgzIvY8HHtGxp5HYs+o2PNo7Bkdex6LPWNiz+OxZ2zseSL2jIs942PPhNjzZOyZGHueij2TYs/TsWdy7Hkm9kyJPVNjz7TY82zsmR57nos9M2LP87FnZux5IfbMij0vxp7Zseel2DMn9rwce+bGnldiz7zY82rsmR97Xos9C2LP67FnYex5I/Ysij1vxp7Fseet2LMk9rwde5bGnndiz7LY827sWR573os9K2LP+7FnZez5IPasij0fxp7Vseej2LMm9nwce9bGnk9iz7rY82nsWR97Pos9G2LPxtizKfZ8Hnu+iD1fxp7Nseer2LMl9nwde76JPd/Gnu9iz/exZ2vs+SH2bIs9P8ae7bHnp9izI/b8HHt2xp5fYs+u2PNr7Nkde36LPXtiz++x54+0/87Q3thjAxXCfwcsb+zJF3vyx54Csadg7CkUewrHniKxp2jsKRZ7iseeErGnZOw5JPaUij2Hxp7Sseew2FMm9hwee46IPUfGnrKx56jYc3TsOSb2lIs9x8ae8rGnQuypGHuOiz2VYs/xsady7Dkh9lSJPSfGnqqx56TYUy32nLx/INZI+3dIpsd5lxHnXWacd1lx3mXHeZcT592pcd6dFufd6XHe1Yzz7ow472rFeXdmnHe147w7K867OnHenR3nXd04786J865enHfnxnlXP8678+K8axDn3flx3jWM8+6COO8axXl3YZx3jeO8uyjOuyZx3jWN865ZnHcXx3nXPM67S+K8axHn3aVx3rWM8+6yOO9axXl3eZx3reO8uyLOuzZx3l0Z513bOO+uivOuXZx3V8d51z7Ou2vivOsQ5921cd51jPPuujjvOsV5d32cd53jvLshzrsucd51jfOuW5x3N8Z51z3Ou5vivOsR593Ncd71jPPuljjvesV5d2ucd73jvLstzrs+cd7dHudd3zjv7ojzrl+cd3fGedc/zru74rwbEOfd3XHeDYzz7p447wbFeXdvnHeD47y7L867IXHe3R/n3dA47x6I825YnHcPxnk3PM67h+K8GxHn3cNx3o2M8+6ROO9GxXn3aJx3o+O8eyzOuzFx3j0e593YOO+eiPNuXJx34+O8mxDn3ZNx3k2M8+6pOO8mxXn3dJx3k+O8eybOuylx3k2N825anHfPxnk3Pc675+K8mxHn3fNx3s2M8+6FOO9mxXn3Ypx3s+O8eynOuzlx3r0c593cOO9eifNuXpx3r8Z5Nz/Ou9fivFsQ593rcd4tjPPujTjvFsV592acd4vjvHsrzrslcd69Hefd0jjv3onzblmcd+/Gebc8zrv34rxbEefd+3HerYzz7oM471bFefdhnHer47z7KM67NXHefRzn3do47z6J825dnHefxnm3Ps67z+K82xDn3cY47zbFefd5nHdfxHn3ZZx3m+O8+yrOuy1x3n0d5903cd59G+fdd3HefR/n3dY4736I825bnHc/xnm3Pc67n+K82xHn3c9x3u2M8+6XOO92xXn3a5x3u+O8+y3Ouz1x3v0e590fcd79Gefd3jjv7B/7vwtx3uWJ8y5vnHf54rzLH+ddgTjvCsZ5VyjOu8Jx3hWJ865onHfF4rwrHuddiTjvSsZ5d0icd6XivDs0zrvScd4dFuddmTjvDo/z7og4746M865snHdHxXl3dJx3x8R5Vy7Ou2PjvCsf512FOO8qxnl3XJx3leK8Oz7Ou8px3p0Q512V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",
    "debug_symbols": "",
    "file_map": {
        "18": {
            "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime, static_assert};\n    use super::{\n        field_less_than, modulus_be_bits, modulus_be_bytes, modulus_le_bits, modulus_le_bytes,\n    };\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // Updated test to account for Brillig restriction that radix must be greater than 2\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_brillig_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 1;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    unconstrained fn not_enough_limbs_brillig() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    fn not_enough_limbs() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n\n    #[test]\n    unconstrained fn test_large_field_values_unconstrained() {\n        let large_field = 0xffffffffffffffff;\n\n        let bits: [u1; 64] = large_field.to_le_bits();\n        assert_eq(bits[0], 1);\n\n        let bytes: [u8; 8] = large_field.to_le_bytes();\n        assert_eq(Field::from_le_bytes::<8>(bytes), large_field);\n\n        let radix_bytes: [u8; 8] = large_field.to_le_radix(256);\n        assert_eq(Field::from_le_bytes::<8>(radix_bytes), large_field);\n    }\n\n    #[test]\n    fn test_large_field_values() {\n        let large_val = 0xffffffffffffffff;\n\n        let bits: [u1; 64] = large_val.to_le_bits();\n        assert_eq(bits[0], 1);\n\n        let bytes: [u8; 8] = large_val.to_le_bytes();\n        assert_eq(Field::from_le_bytes::<8>(bytes), large_val);\n\n        let radix_bytes: [u8; 8] = large_val.to_le_radix(256);\n        assert_eq(Field::from_le_bytes::<8>(radix_bytes), large_val);\n    }\n\n    #[test]\n    fn test_decomposition_edge_cases() {\n        let zero_bits: [u1; 8] = 0.to_le_bits();\n        assert_eq(zero_bits, [0; 8]);\n\n        let zero_bytes: [u8; 8] = 0.to_le_bytes();\n        assert_eq(zero_bytes, [0; 8]);\n\n        let one_bits: [u1; 8] = 1.to_le_bits();\n        let expected: [u1; 8] = [1, 0, 0, 0, 0, 0, 0, 0];\n        assert_eq(one_bits, expected);\n\n        let pow2_bits: [u1; 8] = 4.to_le_bits();\n        let expected: [u1; 8] = [0, 0, 1, 0, 0, 0, 0, 0];\n        assert_eq(pow2_bits, expected);\n    }\n\n    #[test]\n    fn test_pow_32() {\n        assert_eq(2.pow_32(3), 8);\n        assert_eq(3.pow_32(2), 9);\n        assert_eq(5.pow_32(0), 1);\n        assert_eq(7.pow_32(1), 7);\n\n        assert_eq(2.pow_32(10), 1024);\n\n        assert_eq(0.pow_32(5), 0);\n        assert_eq(0.pow_32(0), 1);\n\n        assert_eq(1.pow_32(100), 1);\n    }\n\n    #[test]\n    fn test_sgn0() {\n        assert_eq(0.sgn0(), 0);\n        assert_eq(2.sgn0(), 0);\n        assert_eq(4.sgn0(), 0);\n        assert_eq(100.sgn0(), 0);\n\n        assert_eq(1.sgn0(), 1);\n        assert_eq(3.sgn0(), 1);\n        assert_eq(5.sgn0(), 1);\n        assert_eq(101.sgn0(), 1);\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 8 limbs\")]\n    fn test_bit_decomposition_overflow() {\n        // 8 bits can't represent large field values\n        let large_val = 0x1000000000000000;\n        let _: [u1; 8] = large_val.to_le_bits();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 4 limbs\")]\n    fn test_byte_decomposition_overflow() {\n        // 4 bytes can't represent large field values\n        let large_val = 0x1000000000000000;\n        let _: [u8; 4] = large_val.to_le_bytes();\n    }\n\n    #[test]\n    fn test_to_from_be_bytes_bn254_edge_cases() {\n        if crate::compat::is_bn254() {\n            // checking that decrementing this byte produces the expected 32 BE bytes for (modulus - 1)\n            let mut p_minus_1_bytes: [u8; 32] = modulus_be_bytes().as_array();\n            assert(p_minus_1_bytes[32 - 1] > 0);\n            p_minus_1_bytes[32 - 1] -= 1;\n\n            let p_minus_1 = Field::from_be_bytes::<32>(p_minus_1_bytes);\n            assert_eq(p_minus_1 + 1, 0);\n\n            // checking that converting (modulus - 1) from and then to 32 BE bytes produces the same bytes\n            let p_minus_1_converted_bytes: [u8; 32] = p_minus_1.to_be_bytes();\n            assert_eq(p_minus_1_converted_bytes, p_minus_1_bytes);\n\n            // checking that incrementing this byte produces 32 BE bytes for (modulus + 1)\n            let mut p_plus_1_bytes: [u8; 32] = modulus_be_bytes().as_array();\n            assert(p_plus_1_bytes[32 - 1] < 255);\n            p_plus_1_bytes[32 - 1] += 1;\n\n            let p_plus_1 = Field::from_be_bytes::<32>(p_plus_1_bytes);\n            assert_eq(p_plus_1, 1);\n\n            // checking that converting p_plus_1 to 32 BE bytes produces the same\n            // byte set to 1 as p_plus_1_bytes and otherwise zeroes\n            let mut p_plus_1_converted_bytes: [u8; 32] = p_plus_1.to_be_bytes();\n            assert_eq(p_plus_1_converted_bytes[32 - 1], 1);\n            p_plus_1_converted_bytes[32 - 1] = 0;\n            assert_eq(p_plus_1_converted_bytes, [0; 32]);\n\n            // checking that Field::from_be_bytes::<32> on the Field modulus produces 0\n            assert_eq(modulus_be_bytes().len(), 32);\n            let p = Field::from_be_bytes::<32>(modulus_be_bytes().as_array());\n            assert_eq(p, 0);\n\n            // checking that converting 0 to 32 BE bytes produces 32 zeroes\n            let p_bytes: [u8; 32] = 0.to_be_bytes();\n            assert_eq(p_bytes, [0; 32]);\n        }\n    }\n\n    #[test]\n    fn test_to_from_le_bytes_bn254_edge_cases() {\n        if crate::compat::is_bn254() {\n            // checking that decrementing this byte produces the expected 32 LE bytes for (modulus - 1)\n            let mut p_minus_1_bytes: [u8; 32] = modulus_le_bytes().as_array();\n            assert(p_minus_1_bytes[0] > 0);\n            p_minus_1_bytes[0] -= 1;\n\n            let p_minus_1 = Field::from_le_bytes::<32>(p_minus_1_bytes);\n            assert_eq(p_minus_1 + 1, 0);\n\n            // checking that converting (modulus - 1) from and then to 32 BE bytes produces the same bytes\n            let p_minus_1_converted_bytes: [u8; 32] = p_minus_1.to_le_bytes();\n            assert_eq(p_minus_1_converted_bytes, p_minus_1_bytes);\n\n            // checking that incrementing this byte produces 32 LE bytes for (modulus + 1)\n            let mut p_plus_1_bytes: [u8; 32] = modulus_le_bytes().as_array();\n            assert(p_plus_1_bytes[0] < 255);\n            p_plus_1_bytes[0] += 1;\n\n            let p_plus_1 = Field::from_le_bytes::<32>(p_plus_1_bytes);\n            assert_eq(p_plus_1, 1);\n\n            // checking that converting p_plus_1 to 32 LE bytes produces the same\n            // byte set to 1 as p_plus_1_bytes and otherwise zeroes\n            let mut p_plus_1_converted_bytes: [u8; 32] = p_plus_1.to_le_bytes();\n            assert_eq(p_plus_1_converted_bytes[0], 1);\n            p_plus_1_converted_bytes[0] = 0;\n            assert_eq(p_plus_1_converted_bytes, [0; 32]);\n\n            // checking that Field::from_le_bytes::<32> on the Field modulus produces 0\n            assert_eq(modulus_le_bytes().len(), 32);\n            let p = Field::from_le_bytes::<32>(modulus_le_bytes().as_array());\n            assert_eq(p, 0);\n\n            // checking that converting 0 to 32 LE bytes produces 32 zeroes\n            let p_bytes: [u8; 32] = 0.to_le_bytes();\n            assert_eq(p_bytes, [0; 32]);\n        }\n    }\n\n    /// Convert a little endian bit array to a field element.\n    /// If the provided bit array overflows the field modulus then the Field will silently wrap around.\n    fn from_le_bits<let N: u32>(bits: [u1; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bits().len(),\n            \"N must be less than or equal to modulus_le_bits().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bits[i] as Field) * v;\n            v = v * 2;\n        }\n        result\n    }\n\n    /// Convert a big endian bit array to a field element.\n    /// If the provided bit array overflows the field modulus then the Field will silently wrap around.\n    fn from_be_bits<let N: u32>(bits: [u1; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bits[N - 1 - i] as Field) * v;\n            v = v * 2;\n        }\n        result\n    }\n\n    #[test]\n    fn test_to_from_be_bits_bn254_edge_cases() {\n        if crate::compat::is_bn254() {\n            // checking that decrementing this bit produces the expected 254 BE bits for (modulus - 1)\n            let mut p_minus_1_bits: [u1; 254] = modulus_be_bits().as_array();\n            assert(p_minus_1_bits[254 - 1] > 0);\n            p_minus_1_bits[254 - 1] -= 1;\n\n            let p_minus_1 = from_be_bits::<254>(p_minus_1_bits);\n            assert_eq(p_minus_1 + 1, 0);\n\n            // checking that converting (modulus - 1) from and then to 254 BE bits produces the same bits\n            let p_minus_1_converted_bits: [u1; 254] = p_minus_1.to_be_bits();\n            assert_eq(p_minus_1_converted_bits, p_minus_1_bits);\n\n            // checking that incrementing this bit produces 254 BE bits for (modulus + 4)\n            let mut p_plus_4_bits: [u1; 254] = modulus_be_bits().as_array();\n            assert(p_plus_4_bits[254 - 3] < 1);\n            p_plus_4_bits[254 - 3] += 1;\n\n            let p_plus_4 = from_be_bits::<254>(p_plus_4_bits);\n            assert_eq(p_plus_4, 4);\n\n            // checking that converting p_plus_4 to 254 BE bits produces the same\n            // bit set to 1 as p_plus_4_bits and otherwise zeroes\n            let mut p_plus_4_converted_bits: [u1; 254] = p_plus_4.to_be_bits();\n            assert_eq(p_plus_4_converted_bits[254 - 3], 1);\n            p_plus_4_converted_bits[254 - 3] = 0;\n            assert_eq(p_plus_4_converted_bits, [0; 254]);\n\n            // checking that Field::from_be_bits::<254> on the Field modulus produces 0\n            assert_eq(modulus_be_bits().len(), 254);\n            let p = from_be_bits::<254>(modulus_be_bits().as_array());\n            assert_eq(p, 0);\n\n            // checking that converting 0 to 254 BE bytes produces 254 zeroes\n            let p_bits: [u1; 254] = 0.to_be_bits();\n            assert_eq(p_bits, [0; 254]);\n        }\n    }\n\n    #[test]\n    fn test_to_from_le_bits_bn254_edge_cases() {\n        if crate::compat::is_bn254() {\n            // checking that decrementing this bit produces the expected 254 LE bits for (modulus - 1)\n            let mut p_minus_1_bits: [u1; 254] = modulus_le_bits().as_array();\n            assert(p_minus_1_bits[0] > 0);\n            p_minus_1_bits[0] -= 1;\n\n            let p_minus_1 = from_le_bits::<254>(p_minus_1_bits);\n            assert_eq(p_minus_1 + 1, 0);\n\n            // checking that converting (modulus - 1) from and then to 254 BE bits produces the same bits\n            let p_minus_1_converted_bits: [u1; 254] = p_minus_1.to_le_bits();\n            assert_eq(p_minus_1_converted_bits, p_minus_1_bits);\n\n            // checking that incrementing this bit produces 254 LE bits for (modulus + 4)\n            let mut p_plus_4_bits: [u1; 254] = modulus_le_bits().as_array();\n            assert(p_plus_4_bits[2] < 1);\n            p_plus_4_bits[2] += 1;\n\n            let p_plus_4 = from_le_bits::<254>(p_plus_4_bits);\n            assert_eq(p_plus_4, 4);\n\n            // checking that converting p_plus_4 to 254 LE bits produces the same\n            // bit set to 1 as p_plus_4_bits and otherwise zeroes\n            let mut p_plus_4_converted_bits: [u1; 254] = p_plus_4.to_le_bits();\n            assert_eq(p_plus_4_converted_bits[2], 1);\n            p_plus_4_converted_bits[2] = 0;\n            assert_eq(p_plus_4_converted_bits, [0; 254]);\n\n            // checking that Field::from_le_bits::<254> on the Field modulus produces 0\n            assert_eq(modulus_le_bits().len(), 254);\n            let p = from_le_bits::<254>(modulus_le_bits().as_array());\n            assert_eq(p, 0);\n\n            // checking that converting 0 to 254 LE bytes produces 254 zeroes\n            let p_bits: [u1; 254] = 0.to_le_bits();\n            assert_eq(p_bits, [0; 254]);\n        }\n    }\n}\n",
            "path": "std/field/mod.nr"
        },
        "19": {
            "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{\n    if crate::runtime::is_unconstrained() {\n        // Temporary measure while Barretenberg is main proving system.\n        // Please open an issue if you're working on another proving system and running into problems due to this.\n        crate::static_assert(\n            N <= 1024,\n            \"Barretenberg cannot prove blake3 hashes with inputs larger than 1024 bytes\",\n        );\n    }\n    __blake3(input)\n}\n\n#[foreign(blake3)]\nfn __blake3<let N: u32>(input: [u8; N]) -> [u8; 32] {}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars, true)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn poseidon2_permutation<let N: u32>(input: [Field; N], state_len: u32) -> [Field; N] {\n    assert_eq(input.len(), state_len);\n    poseidon2_permutation_internal(input)\n}\n\n#[foreign(poseidon2_permutation)]\nfn poseidon2_permutation_internal<let N: u32>(input: [Field; N]) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::hash::Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: $crate::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher {\n    type H: Hasher;\n\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    type H = H;\n\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u8 as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u16 as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u32 as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u64 as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
            "path": "std/hash/mod.nr"
        },
        "52": {
            "source": "use crate::ECDHTrait;\nuse ec::consts::te::{baby_jubjub, BabyJubjub};\nuse ec::tecurve::affine::Point;\n\npub struct BJJ {\n    pub private_key: Field,\n    pub bjj: BabyJubjub,\n}\n\nimpl ECDHTrait for BJJ {\n    fn new(private_key: Field) -> Self {\n        let bjj = baby_jubjub();\n        Self { bjj, private_key }\n    }\n\n    fn derive_public_key(self) -> Point {\n        self.bjj.curve.mul(self.private_key, self.bjj.base8)\n    }\n\n    fn derive_shared_key(self, public_key: Point) -> Field {\n        let shared_key = self.bjj.curve.mul(self.private_key, public_key);\n        shared_key.x\n    }\n}\n",
            "path": "/home/jeevu/nargo/github.com/yashsharma22003/Noir-Circuits-Tests/v1/packages/ecdh/src/bjj.nr"
        },
        "59": {
            "source": "pub mod affine {\n    // Affine coordinate representation of Twisted Edwards curves\n    // Points are represented by two-dimensional Cartesian coordinates.\n    // Group operations are implemented in terms of those in CurveGroup (in this case, extended Twisted Edwards) coordinates\n    // for reasons of efficiency.\n    // See <https://eprint.iacr.org/2008/522.pdf> for details.\n    use crate::{\n        montcurve::affine::{Curve as MCurve, Point as MPoint},\n        swcurve::affine::{Curve as SWCurve, Point as SWPoint}, tecurve::curvegroup,\n    };\n    use std::cmp::Eq;\n\n    // Curve specification\n    pub struct Curve { // Twisted Edwards curve\n        // Coefficients in defining equation ax^2 + y^2 = 1 + dx^2y^2\n        pub a: Field,\n        pub d: Field,\n        // Generator as point in Cartesian coordinates\n        pub gen: Point,\n    }\n    // Point in Cartesian coordinates\n    pub struct Point {\n        pub x: Field,\n        pub y: Field,\n    }\n\n    impl Point {\n        // Point constructor\n        // #[deprecated(\"It's recommmended to use the external noir-edwards library (https://github.com/noir-lang/noir-edwards)\")]\n        pub fn new(x: Field, y: Field) -> Self {\n            Self { x, y }\n        }\n\n        // Check if zero\n        pub fn is_zero(self) -> bool {\n            self.eq(Point::zero())\n        }\n\n        // Conversion to CurveGroup coordinates\n        pub fn into_group(self) -> curvegroup::Point {\n            let Self { x, y } = self;\n\n            curvegroup::Point::new(x, y, x * y, 1)\n        }\n\n        // Additive identity\n        pub fn zero() -> Self {\n            Point::new(0, 1)\n        }\n\n        // Negation\n        pub fn negate(self) -> Self {\n            let Self { x, y } = self;\n            Point::new(0 - x, y)\n        }\n\n        // Map into prime-order subgroup of equivalent Montgomery curve\n        pub fn into_montcurve(self) -> MPoint {\n            if self.is_zero() {\n                MPoint::zero()\n            } else {\n                let Self { x, y } = self;\n                let x0 = (1 + y) / (1 - y);\n                let y0 = (1 + y) / (x * (1 - y));\n\n                MPoint::new(x0, y0)\n            }\n        }\n    }\n\n    impl Eq for Point {\n        fn eq(self, p: Self) -> bool {\n            let Self { x: x1, y: y1 } = self;\n            let Self { x: x2, y: y2 } = p;\n\n            (x1 == x2) & (y1 == y2)\n        }\n    }\n\n    impl Curve {\n        // Curve constructor\n        pub fn new(a: Field, d: Field, gen: Point) -> Curve {\n            // Check curve coefficients\n            assert(a * d * (a - d) != 0);\n\n            let curve = Curve { a, d, gen };\n\n            // gen should be on the curve\n            assert(curve.contains(curve.gen));\n\n            curve\n        }\n\n        // Conversion to CurveGroup coordinates\n        pub fn into_group(self) -> curvegroup::Curve {\n            let Curve { a, d, gen } = self;\n\n            curvegroup::Curve { a, d, gen: gen.into_group() }\n        }\n\n        // Membership check\n        pub fn contains(self, p: Point) -> bool {\n            let Point { x, y } = p;\n            self.a * x * x + y * y == 1 + self.d * x * x * y * y\n        }\n\n        // Point addition, implemented in terms of mixed addition for reasons of efficiency\n        pub fn add(self, p1: Point, p2: Point) -> Point {\n            self.mixed_add(p1, p2.into_group()).into_affine()\n        }\n\n        // Mixed point addition, i.e. first argument in affine, second in CurveGroup coordinates.\n        pub fn mixed_add(self, p1: Point, p2: curvegroup::Point) -> curvegroup::Point {\n            let Point { x: x1, y: y1 } = p1;\n            let curvegroup::Point { x: x2, y: y2, t: t2, z: z2 } = p2;\n\n            let a = x1 * x2;\n            let b = y1 * y2;\n            let c = self.d * x1 * y1 * t2;\n            let e = (x1 + y1) * (x2 + y2) - a - b;\n            let f = z2 - c;\n            let g = z2 + c;\n            let h = b - self.a * a;\n\n            let x = e * f;\n            let y = g * h;\n            let t = e * h;\n            let z = f * g;\n\n            curvegroup::Point::new(x, y, t, z)\n        }\n\n        // Scalar multiplication with scalar represented by a bit array (little-endian convention).\n        // If k is the natural number represented by `bits`, then this computes p + ... + p k times.\n        pub fn bit_mul<let N: u32>(self, bits: [u1; N], p: Point) -> Point {\n            self.into_group().bit_mul(bits, p.into_group()).into_affine()\n        }\n\n        // Scalar multiplication (p + ... + p n times)\n        pub fn mul(self, n: Field, p: Point) -> Point {\n            self.into_group().mul(n, p.into_group()).into_affine()\n        }\n\n        // Multi-scalar multiplication (n[0]*p[0] + ... + n[N]*p[N], where * denotes scalar multiplication)\n        pub fn msm<let N: u32>(self, n: [Field; N], p: [Point; N]) -> Point {\n            let mut out = Point::zero();\n\n            for i in 0..N {\n                out = self.add(out, self.mul(n[i], p[i]));\n            }\n\n            out\n        }\n\n        // Point subtraction\n        pub fn subtract(self, p1: Point, p2: Point) -> Point {\n            self.add(p1, p2.negate())\n        }\n\n        // Conversion to equivalent Montgomery curve\n        pub fn into_montcurve(self) -> MCurve {\n            let j = 2 * (self.a + self.d) / (self.a - self.d);\n            let k = 4 / (self.a - self.d);\n            let gen_montcurve = self.gen.into_montcurve();\n\n            MCurve::new(j, k, gen_montcurve)\n        }\n\n        // Conversion to equivalent Short Weierstrass curve\n        pub fn into_swcurve(self) -> SWCurve {\n            self.into_montcurve().into_swcurve()\n        }\n\n        // Point mapping into equivalent Short Weierstrass curve\n        pub fn map_into_swcurve(self, p: Point) -> SWPoint {\n            self.into_montcurve().map_into_swcurve(p.into_montcurve())\n        }\n\n        // Point mapping from equivalent Short Weierstrass curve\n        pub fn map_from_swcurve(self, p: SWPoint) -> Point {\n            self.into_montcurve().map_from_swcurve(p).into_tecurve()\n        }\n\n        // Elligator 2 map-to-curve method (via rational map)\n        pub fn elligator2_map(self, u: Field) -> Point {\n            self.into_montcurve().elligator2_map(u).into_tecurve()\n        }\n\n        // Simplified SWU map-to-curve method (via rational map)\n        pub fn swu_map(self, z: Field, u: Field) -> Point {\n            self.into_montcurve().swu_map(z, u).into_tecurve()\n        }\n    }\n}\npub mod curvegroup {\n    // CurveGroup coordinate representation of Twisted Edwards curves\n    // Points are represented by four-dimensional projective coordinates, viz. extended Twisted Edwards coordinates.\n    // See section 3 of <https://eprint.iacr.org/2008/522.pdf> for details.\n    use crate::{\n        montcurve::curvegroup::{Curve as MCurve, Point as MPoint},\n        swcurve::curvegroup::{Curve as SWCurve, Point as SWPoint}, tecurve::affine,\n    };\n    use std::cmp::Eq;\n\n    // Curve specification\n    pub struct Curve { // Twisted Edwards curve\n        // Coefficients in defining equation a(x^2 + y^2)z^2 = z^4 + dx^2y^2\n        pub a: Field,\n        pub d: Field,\n        // Generator as point in projective coordinates\n        pub gen: Point,\n    }\n    // Point in extended twisted Edwards coordinates\n    pub struct Point {\n        pub x: Field,\n        pub y: Field,\n        pub t: Field,\n        pub z: Field,\n    }\n\n    impl Point {\n        // Point constructor\n        pub fn new(x: Field, y: Field, t: Field, z: Field) -> Self {\n            Self { x, y, t, z }\n        }\n\n        // Check if zero\n        pub fn is_zero(self) -> bool {\n            let Self { x, y, t, z } = self;\n            (x == 0) & (y == z) & (y != 0) & (t == 0)\n        }\n\n        // Conversion to affine coordinates\n        pub fn into_affine(self) -> affine::Point {\n            let Self { x, y, t: _t, z } = self;\n\n            affine::Point::new(x / z, y / z)\n        }\n\n        // Additive identity\n        pub fn zero() -> Self {\n            Point::new(0, 1, 0, 1)\n        }\n\n        // Negation\n        pub fn negate(self) -> Self {\n            let Self { x, y, t, z } = self;\n\n            Point::new(0 - x, y, 0 - t, z)\n        }\n\n        // Map into prime-order subgroup of equivalent Montgomery curve\n        pub fn into_montcurve(self) -> MPoint {\n            self.into_affine().into_montcurve().into_group()\n        }\n    }\n\n    impl Eq for Point {\n        fn eq(self, p: Self) -> bool {\n            let Self { x: x1, y: y1, t: _t1, z: z1 } = self;\n            let Self { x: x2, y: y2, t: _t2, z: z2 } = p;\n\n            (x1 * z2 == x2 * z1) & (y1 * z2 == y2 * z1)\n        }\n    }\n\n    impl Curve {\n        // Curve constructor\n        pub fn new(a: Field, d: Field, gen: Point) -> Curve {\n            // Check curve coefficients\n            assert(a * d * (a - d) != 0);\n\n            let curve = Curve { a, d, gen };\n\n            // gen should be on the curve\n            assert(curve.contains(curve.gen));\n\n            curve\n        }\n\n        // Conversion to affine coordinates\n        pub fn into_affine(self) -> affine::Curve {\n            let Curve { a, d, gen } = self;\n\n            affine::Curve { a, d, gen: gen.into_affine() }\n        }\n\n        // Membership check\n        pub fn contains(self, p: Point) -> bool {\n            let Point { x, y, t, z } = p;\n\n            (z != 0)\n                & (z * t == x * y)\n                & (z * z * (self.a * x * x + y * y) == z * z * z * z + self.d * x * x * y * y)\n        }\n\n        // Point addition\n        pub fn add(self, p1: Point, p2: Point) -> Point {\n            let Point { x: x1, y: y1, t: t1, z: z1 } = p1;\n            let Point { x: x2, y: y2, t: t2, z: z2 } = p2;\n\n            let a = x1 * x2;\n            let b = y1 * y2;\n            let c = self.d * t1 * t2;\n            let d = z1 * z2;\n            let e = (x1 + y1) * (x2 + y2) - a - b;\n            let f = d - c;\n            let g = d + c;\n            let h = b - self.a * a;\n\n            let x = e * f;\n            let y = g * h;\n            let t = e * h;\n            let z = f * g;\n\n            Point::new(x, y, t, z)\n        }\n\n        // Point doubling, cf. section 3.3\n        pub fn double(self, p: Point) -> Point {\n            let Point { x, y, t: _t, z } = p;\n\n            let a = x * x;\n            let b = y * y;\n            let c = 2 * z * z;\n            let d = self.a * a;\n            let e = (x + y) * (x + y) - a - b;\n            let g = d + b;\n            let f = g - c;\n            let h = d - b;\n\n            let x0 = e * f;\n            let y0 = g * h;\n            let t0 = e * h;\n            let z0 = f * g;\n\n            Point::new(x0, y0, t0, z0)\n        }\n\n        // Scalar multiplication with scalar represented by a bit array (little-endian convention).\n        // If k is the natural number represented by `bits`, then this computes p + ... + p k times.\n        pub fn bit_mul<let N: u32>(self, bits: [u1; N], p: Point) -> Point {\n            let mut out = Point::zero();\n\n            for i in 0..N {\n                out = self.add(\n                    self.add(out, out),\n                    if (bits[N - i - 1] == 0) {\n                        Point::zero()\n                    } else {\n                        p\n                    },\n                );\n            }\n\n            out\n        }\n\n        // Scalar multiplication (p + ... + p n times)\n        pub fn mul(self, n: Field, p: Point) -> Point {\n            // TODO: temporary workaround until issue 1354 is solved\n            let mut n_as_bits: [u1; 254] = [0; 254];\n            let tmp: [u1; 254] = n.to_le_bits();\n            for i in 0..254 {\n                n_as_bits[i] = tmp[i];\n            }\n\n            self.bit_mul(n_as_bits, p)\n        }\n\n        // Multi-scalar multiplication (n[0]*p[0] + ... + n[N]*p[N], where * denotes scalar multiplication)\n        pub fn msm<let N: u32>(self, n: [Field; N], p: [Point; N]) -> Point {\n            let mut out = Point::zero();\n\n            for i in 0..N {\n                out = self.add(out, self.mul(n[i], p[i]));\n            }\n\n            out\n        }\n\n        // Point subtraction\n        pub fn subtract(self, p1: Point, p2: Point) -> Point {\n            self.add(p1, p2.negate())\n        }\n\n        // Conversion to equivalent Montgomery curve\n        pub fn into_montcurve(self) -> MCurve {\n            self.into_affine().into_montcurve().into_group()\n        }\n\n        // Conversion to equivalent Short Weierstrass curve\n        pub fn into_swcurve(self) -> SWCurve {\n            self.into_montcurve().into_swcurve()\n        }\n\n        // Point mapping into equivalent short Weierstrass curve\n        pub fn map_into_swcurve(self, p: Point) -> SWPoint {\n            self.into_montcurve().map_into_swcurve(p.into_montcurve())\n        }\n\n        // Point mapping from equivalent short Weierstrass curve\n        pub fn map_from_swcurve(self, p: SWPoint) -> Point {\n            self.into_montcurve().map_from_swcurve(p).into_tecurve()\n        }\n\n        // Elligator 2 map-to-curve method (via rational maps)\n        pub fn elligator2_map(self, u: Field) -> Point {\n            self.into_montcurve().elligator2_map(u).into_tecurve()\n        }\n\n        // Simplified SWU map-to-curve method (via rational map)\n        pub fn swu_map(self, z: Field, u: Field) -> Point {\n            self.into_montcurve().swu_map(z, u).into_tecurve()\n        }\n    }\n}\n",
            "path": "/home/jeevu/nargo/github.com/noir-lang/ec/v0.1.2/src/tecurve.nr"
        },
        "66": {
            "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
            "path": "/home/jeevu/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"
        },
        "68": {
            "source": "use ecdh::{bjj::BJJ, ECDHTrait, Point};\nuse poseidon::poseidon2::Poseidon2;\nmod merkle_tree;\n// Bob's main function is now a proving circuit.\n// It takes Alice's public key, the nonce, and the final commitment as public inputs.\n#[export]\nfn not_equal(x: Field, y: Field) -> bool {\n    x != y\n}\n\nfn main(\n    bob_priv_key: Field,\n    alice_pub_key_x: Field,\n    alice_pub_key_y: Field,\n    hash_lock_nonce: Field,\n    order_id: Field,\n    merkle_proof: [Field; 20],\n    is_even: [bool; 20],\n    nullifier_hash: pub Field,\n    root: pub Field,\n) {\n    // --- The internal logic remains identical ---\n    let bob_ecdh = BJJ::new(bob_priv_key);\n\n    // Bob needs his own public key to construct the hash lock, so he derives it internally.\n    let bob_pub_key = bob_ecdh.derive_public_key();\n\n    let alice_pub_key = Point::new(alice_pub_key_x, alice_pub_key_y);\n\n    let shared_secret = bob_ecdh.derive_shared_key(alice_pub_key);\n\n    let reconstructed_hash_lock = Poseidon2::hash([bob_pub_key.x, hash_lock_nonce], 2);\n\n    let derived_commitment = Poseidon2::hash([reconstructed_hash_lock, shared_secret], 2);\n\n    let computed_nullifier_hash = Poseidon2::hash([shared_secret, alice_pub_key_x, order_id], 3);\n\n    let computed_merkle_root =\n        merkle_tree::compute_merkle_root(derived_commitment, merkle_proof, is_even);\n\n    assert(computed_nullifier_hash == nullifier_hash);\n\n    assert(computed_merkle_root == root);\n}\n\n// #[test]\n// fn test_main_circuit_bob() {\n//     // --- 1. SETUP: Identical to before ---\n//     let alice_sk: Field = 0xabcde;\n//     let bob_sk: Field = 0x12345;\n//     let hash_lock_nonce: Field = 0x67890;\n\n//     let alice_ecdh = BJJ::new(alice_sk);\n//     let alice_pk: Point = alice_ecdh.derive_public_key();\n\n//     let bob_ecdh = BJJ::new(bob_sk);\n//     let bob_pk: Point = bob_ecdh.derive_public_key();\n\n//     // --- 2. PRE-COMPUTATION: Calculate the expected result off-circuit ---\n//     let expected_shared_secret = bob_ecdh.derive_shared_key(alice_pk);\n\n//     let expected_hash_lock = Poseidon2::hash([bob_pk.x, hash_lock_nonce], 2);\n\n//     let expected_commitment = Poseidon2::hash([expected_hash_lock, expected_shared_secret], 2);\n\n//     // --- 3. EXECUTION & VERIFICATION: Call the circuit with all public inputs ---\n//     // The test will fail if the `assert` inside `main` is not satisfied.\n//     main(bob_sk, alice_pk.x, alice_pk.y, hash_lock_nonce, expected_commitment);\n// }\n",
            "path": "/home/jeevu/ash/hackathon/Circuits-Noir/circuit_bob/src/main.nr"
        },
        "69": {
            "source": "use poseidon::poseidon2::Poseidon2;\n\npub fn compute_merkle_root(\n    leaf: Field,\n    merkle_proof: [Field; 20],\n    is_even: [bool; 20],\n) -> Field {\n    // temporary variable to store the hash for the current level we are working on\n    let mut hash: Field = leaf;\n    // increment through the levels\n    for i in 0..20 {\n        let (left, right) = if is_even[i] {\n            (hash, merkle_proof[i])\n        } else {\n            (merkle_proof[i], hash)\n        };\n        // compute the hash for the current level\n        hash = Poseidon2::hash([left, right], 2);\n    }\n    // return the root of the Merkle tree\n    hash\n}",
            "path": "/home/jeevu/ash/hackathon/Circuits-Noir/circuit_bob/src/merkle_tree.nr"
        }
    },
    "expression_width": {
        "Bounded": {
            "width": 4
        }
    }
}